Public Class StockRegister

    Dim linq_obj As New RoErpDataContext(System.Configuration.ConfigurationManager.AppSettings("constr").ToString())
    Dim PRID As Long
    Dim tblItem As New DataTable
    Private Sub ProductRegister_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        tblItem.Columns.Add("SrNo")
        tblItem.Columns.Add("Category")
        tblItem.Columns.Add("Row Material Name")
        tblItem.Columns.Add("Quantity")
        tblItem.Columns.Add("Unit")
        tblItem.Columns.Add("Fk_Category")
        tblItem.Columns.Add("Fk_RowMaterial")
        For Each control As Control In Me.Controls
            ' The textbox control.
            Dim parentControl As New Control


            If (control.GetType() Is GetType(GroupBox)) Then
                Dim grpBox As GroupBox = TryCast(control, GroupBox)
                parentControl = grpBox
            ElseIf (control.GetType() Is GetType(TabControl)) Then
                Dim TC As TabControl = TryCast(control, TabControl)
                parentControl = TC
            Else
                Try
                    parentControl = control
                Catch ex As Exception

                End Try

            End If

            For Each subcontrol As Control In parentControl.Controls
                If (subcontrol.GetType() Is GetType(TextBox)) Then
                    Dim textBox As TextBox = TryCast(subcontrol, TextBox)

                    ' If not null, set the handler.
                    If textBox IsNot Nothing Then
                        AddHandler textBox.Enter, AddressOf TextBox_Enter
                        AddHandler textBox.Leave, AddressOf TextBox_Leave
                    End If
                End If

                ' Set the handler.
            Next

            ' Set the handler.
        Next
    End Sub
    Private Sub TextBox_Enter(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim txt As New TextBox()
        txt = DirectCast(sender, TextBox)

        txt.BackColor = Color.LightYellow
    End Sub
    Private Sub TextBox_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim txt As New TextBox()
        txt = DirectCast(sender, TextBox)

        txt.BackColor = Color.White
    End Sub
    Public Sub New()
        ' This call is required by the designer.
        InitializeComponent()
        bindGrid()
        GridBind()
        bindDropDown()
        If (PRID > 0) Then
            btnSave.Enabled = False
        Else
            btnSave.Enabled = True
        End If
        getPageRight()

    End Sub

    Public Sub getPageRight()
        Try
            Dim dv As New DataTable
            Dim dataView As DataView
            Dim Class1 As New Class1
            Dim RowCount As Integer
            Dim statusCheck As Boolean = False
            Dim strName As String = ""

            dataView = Class1.global.UserPermissionDataset.Tables(0).DefaultView
            dataView.RowFilter = "([DetailName] like 'Stock Register')"
            If (dataView.Count > 0) Then
                dv = dataView.ToTable()
                If (dv.Rows(0)("Type") = 1) Then

                Else
                    For RowCount = 0 To dv.Rows.Count - 1
                        If (dv.Rows(RowCount)("IsAdd") = True) Then
                            btnAddNewAll.Enabled = True
                            btnAdd.Enabled = True
                        Else
                            btnAddNewAll.Enabled = False
                            btnAdd.Enabled = False
                        End If
                        If (dv.Rows(RowCount)("IsUpdate") = True) Then
                            btnChange.Enabled = True
                        Else
                            btnChange.Enabled = False
                        End If
                        If (dv.Rows(RowCount)("IsDelete") = True) Then
                            btnDelete.Enabled = True
                        Else
                            btnDelete.Enabled = False
                        End If
                        If (dv.Rows(RowCount)("IsPrint") = True) Then

                        Else

                        End If

                    Next
                End If

            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try

    End Sub
    Public Sub bindGrid()
        Dim prData = linq_obj.SP_Select_All_ProductRegisterMaster().ToList()
        Dim dt As New DataTable
        dt.Columns.Add("ID")
        dt.Columns.Add("Category")
        For Each item As SP_Select_All_ProductRegisterMasterResult In prData
            dt.Rows.Add(item.Pk_ProductRegisterId, item.CategoryName)
        Next
        dgCategories.DataSource = dt

    End Sub
    Protected Sub bindDropDown()
        cmb_Category.Items.Clear()
        Dim dt As New DataTable
        dt.Columns.Add("Id")
        dt.Columns.Add("Category")
        Dim productMain = linq_obj.SP_Select_All_ProductRegisterMaster().ToList()
        For Each item As SP_Select_All_ProductRegisterMasterResult In productMain
            dt.Rows.Add(item.Pk_ProductRegisterId, item.CategoryName)
        Next
        Dim dr As DataRow = dt.NewRow()
        dr(1) = "Select"
        dt.Rows.InsertAt(dr, 0)
        cmb_Category.DataSource = dt
        cmb_Category.DisplayMember = "Category"
        cmb_Category.ValueMember = "Id"
        cmb_Category.AutoCompleteMode = AutoCompleteMode.Append
        cmb_Category.DropDownStyle = ComboBoxStyle.DropDownList
        cmb_Category.AutoCompleteSource = AutoCompleteSource.ListItems
    End Sub

    Private Sub cmb_Category_SelectionChangeCommitted(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmb_Category.SelectionChangeCommitted
        If cmb_Category.Text <> "Select" Then
            PRID = cmb_Category.SelectedValue
            Dim rowMaterial = linq_obj.SP_Select_All_RowMaterialMaster(PRID).ToList()
            Cmb_RawMaterial.DataSource = rowMaterial
            Cmb_RawMaterial.DisplayMember = "RowMaterialName"
            Cmb_RawMaterial.ValueMember = "Pk_RowMaterialId"
            Cmb_RawMaterial.AutoCompleteMode = AutoCompleteMode.Append
            Cmb_RawMaterial.DropDownStyle = ComboBoxStyle.DropDownList
            Cmb_RawMaterial.AutoCompleteSource = AutoCompleteSource.ListItems
            PRID = Convert.ToInt32(cmb_Category.SelectedValue)
            GridBind()
        End If
    End Sub
    Private Sub GridBind()
        Dim Data = linq_obj.SP_Get_ProductMasterByCategory(PRID).ToList()
        dgRawMaterialData.DataSource = Data
        If (dgRawMaterialData.RowCount > 0) Then
            dgRawMaterialData.Columns(0).Visible = False
            dgRawMaterialData.Columns(1).Visible = False
            dgRawMaterialData.Columns(2).Visible = False
        End If
    End Sub

    Private Sub btnsave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAdd.Click
        Try
            Dim res As Integer
            res = linq_obj.SP_Insert_ProductMaster(Convert.ToInt64(cmb_Category.SelectedValue), Convert.ToInt64(Cmb_RawMaterial.SelectedValue), Convert.ToInt64(txtTotstock.Text), Convert.ToInt64(txtIssueStock.Text), Convert.ToInt64(txtReorder.Text), Convert.ToInt64(txtReStock.Text), txtunit.Text, DateTime.Now)
            linq_obj.SubmitChanges()
            'MessageBox.Show("Insert Sucessfully....")
            GridBind()
            BlankText()
        Catch ex As Exception
            MessageBox.Show("Error in Insertion")
        End Try
    End Sub
    Private Sub BlankText()
        txtIssueStock.Text = ""
        txtTotstock.Text = ""
        txtReorder.Text = ""
        txtReStock.Text = ""
        txtunit.Text = ""
    End Sub
    Private Sub dgCategories_DoubleClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dgCategories.DoubleClick
        If (Me.dgCategories.SelectedCells(0).Value > 0) Then
            PRID = Convert.ToInt64(Me.dgCategories.SelectedCells(0).Value)
            GridBind()
            cmb_Category.SelectedValue = PRID
        End If
    End Sub
    Private Sub txtIssueStock_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtIssueStock.Leave
        txtReStock.Text = Convert.ToString(Convert.ToInt32(txtTotstock.Text) - Convert.ToInt32(txtIssueStock.Text))
    End Sub
    Private Sub Cmb_RawMaterial_SelectionChangeCommitted(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Cmb_RawMaterial.SelectionChangeCommitted
        Dim dataRaw = linq_obj.SP_Select_RowMaterialMaster_ById(Cmb_RawMaterial.SelectedValue).ToList()
        If (dataRaw.Count > 0) Then
            txtunit.Text = Convert.ToString(dataRaw(0).Unit)
            txtReorder.Text = Convert.ToString(dataRaw(0).ReOrder)
        End If
    End Sub
    Private Sub btnAddNewAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddNewAll.Click
        clear()
    End Sub
 

    Private Sub btnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCancel.Click
        clear()
    End Sub

    Private Sub btnBack_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnBack.Click
        Me.Close()
    End Sub
    Private Sub btnDel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDel.Click
        Dim result As DialogResult = MessageBox.Show("Are You Sure?", "Important Message", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation)
        If result = DialogResult.Yes Then
            Dim cntSelect As Integer = dgRawMaterialData.SelectedRows.Count
            For Each dr As DataGridViewRow In dgRawMaterialData.SelectedRows
                Dim resDelete As Integer = linq_obj.SP_Delete_ProductMaster(Convert.ToInt32(dr.Cells(0).Value))
                linq_obj.SubmitChanges()
            Next
            MessageBox.Show("Successfully Deleted!!!")
            GridBind()
        End If

    End Sub
    Private Sub btnNew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNew.Click
        clear()
    End Sub
    Public Sub clear()
        BlankText()
        btnSave.Enabled = True
        PRID = 0
        cmb_Category.SelectedIndex = 0
        Cmb_RawMaterial.SelectedIndex = 0
    End Sub
End Class
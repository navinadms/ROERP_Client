Imports System.Data.SqlClient

Public Class InqiurySearchByCriteria
    Dim linq_obj As New RoErpDataContext(System.Configuration.ConfigurationManager.AppSettings("constr").ToString())
    Dim count As Integer

    Dim ds As New DataSet
    Public Sub New()
        ' This call is required by the designer.
        InitializeComponent()
        AutoCompated_Text()
        ddlEnqType_Bind()
    End Sub
    Private Sub btnAddRef_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddRef.Click

        If txtRefrence.Text <> "" Then
            txtAllReference.Text += txtRefrence.Text.Trim() + ",".Trim()
            txtRefrence.Text = ""
        End If



    End Sub

    Private Sub btnAddEnqType_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddEnqType.Click
        txtAllEnq.Text += ddlEnqType.Text.Trim() + ",".Trim()

    End Sub

    Private Sub btnAddState_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddState.Click

        If txtState.Text <> "" Then
            txtAllState.Text += txtState.Text.Trim() + ",".Trim()
            txtState.Text = ""
        End If


    End Sub

    Private Sub btnAddCity_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddCity.Click

        If txtCity.Text <> "" Then
            txtAllCity.Text += txtCity.Text.Trim() + ",".Trim()
            txtCity.Text = ""
        End If


    End Sub

    Private Sub btnAddPlant_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddPlant.Click
        If txtPlant.Text <> "" Then
            txtAllPlant.Text += txtPlant.Text.Trim() + ",".Trim()
            txtPlant.Text = ""

        End If

    End Sub

    Public Sub AutoCompated_Text()
        Dim data = linq_obj.SP_Get_AddressListAutoComplete("City").ToList()
        For Each iteam As SP_Get_AddressListAutoCompleteResult In data
            txtCity.AutoCompleteCustomSource.Add(iteam.Result)
        Next

        Dim dataState = linq_obj.SP_Get_AddressListAutoComplete("State").ToList()
        For Each iteam As SP_Get_AddressListAutoCompleteResult In data
            txtState.AutoCompleteCustomSource.Add(iteam.Result)
        Next
      
        Dim getPlant = linq_obj.SP_Get_Enq_EnqMasterList().ToList()

        For Each item As SP_Get_Enq_EnqMasterListResult In getPlant
            txtPlant.AutoCompleteCustomSource.Add(item.EnqFor)
            txtRefrence.AutoCompleteCustomSource.Add(item.Reference)
        Next


    End Sub
    Public Sub ddlEnqType_Bind()
        ddlEnqType.Items.Clear()
        Dim Enq = linq_obj.SP_Get_EnqTypeList().ToList()
        ddlEnqType.DataSource = Enq
        ddlEnqType.DisplayMember = "EnqType"
        ddlEnqType.ValueMember = "Pk_EnqTypeID"
        ddlEnqType.AutoCompleteMode = AutoCompleteMode.Append
        ddlEnqType.DropDownStyle = ComboBoxStyle.DropDownList
        ddlEnqType.AutoCompleteSource = AutoCompleteSource.ListItems
    End Sub
    Function getCity(ByVal str As String) As String
        If str.Equals("") Then
            Return ""
        End If
        Dim strfinal As String
        Dim cnt As Integer
        cnt = str.Split(",").Length
        Dim tmpstr As [String]() = New [String](cnt) {}
        tmpstr = str.Split(",")
        strfinal = "'"
        If cnt > 0 Then
            For index = 0 To tmpstr.Length - 1
                If tmpstr(index) <> "" Then
                    strfinal += tmpstr(index) + "','"
                End If
            Next
            strfinal += "'"
        End If

        Return strfinal
    End Function

    Private Sub btnSearchAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSearchAll.Click
        GenerateReport()
    End Sub

    Public Sub GenerateReport()
        Dim cmd As New SqlCommand
        cmd.CommandText = "SP_SearchAllInquiryReport"
        cmd.Parameters.Add("@end", SqlDbType.DateTime).Value = dtEndDate.Value
        cmd.Parameters.Add("@start", SqlDbType.DateTime).Value = dtStartDate.Value
        cmd.Parameters.Add("@city", SqlDbType.VarChar).Value = getCity(txtAllCity.Text)
        cmd.Parameters.Add("@state", SqlDbType.VarChar).Value = getCity(txtAllState.Text)
        cmd.Parameters.Add("@reference", SqlDbType.VarChar).Value = getCity(txtAllReference.Text)
        cmd.Parameters.Add("@plant", SqlDbType.VarChar).Value = getCity(txtAllPlant.Text)
        cmd.Parameters.Add("@enq", SqlDbType.VarChar).Value = getCity(txtAllEnq.Text)
        Dim objclass As New Class1
        
        ds = objclass.GetEnqReportData(cmd)
        If ds.Tables(1).Rows.Count < 1 Then
            MessageBox.Show("Record Not Found", "No Records", MessageBoxButtons.OK, MessageBoxIcon.Information)
        End If

        DataGridView1.DataSource = ds.Tables(1)

        'ataGridView1.dat)
    End Sub


    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim rpt As New rpt_inquiryReport
        rpt.SetDataSource(ds.Tables(1))
        rpt.PrintToPrinter(1, False, 0, 1)
        rpt.Refresh()
    End Sub

    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnExportExcel.Click
        Try
            Dim app As Microsoft.Office.Interop.Excel._Application = New Microsoft.Office.Interop.Excel.Application()

            ' creating new WorkBook within Excel application
            Dim workbook As Microsoft.Office.Interop.Excel._Workbook = app.Workbooks.Add(Type.Missing)

            ' creating new Excelsheet in workbook
            Dim worksheet As Microsoft.Office.Interop.Excel._Worksheet = Nothing

            ' see the excel sheet behind the program
            app.Visible = True

            ' get the reference of first sheet. By default its name is Sheet1.
            ' store its reference to worksheet
            worksheet = workbook.Sheets("Sheet1")
            worksheet = workbook.ActiveSheet
            ' changing the name of active sheet
            worksheet.Name = Me.Name


            ' storing header part in Excel
            For i As Integer = 1 To DataGridView1.Columns.Count
                worksheet.Cells(1, i) = DataGridView1.Columns(i - 1).HeaderText
            Next

            ' storing Each row and column value to excel sheet
            For i As Integer = 0 To DataGridView1.Rows.Count - 1
                For j As Integer = 0 To DataGridView1.Columns.Count - 1
                    worksheet.Cells(i + 2, j + 1) = DataGridView1.Rows(i).Cells(j).Value.ToString()
                    count += i + 2 + j + 1
                Next
            Next


            ' save the application
            workbook.SaveAs("d:\output(" & count & ").xls", Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, _
             Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing)

            ' Exit from the application
            ' app.Quit();
            ' storing Each row and column value to excel sheet
            MessageBox.Show("Excel Download SucessFully on D:\output(" & count & ").xls ")
        Catch generatedExceptionName As Exception
        End Try

        'Dim rpt As New rpt_inquiryReport
        'rpt.SetDataSource(ds.Tables(1))


        'rpt.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.Excel, "ABC.xls")

        'MessageBox.Show("Successfully Exported")
        ' FileOpen(1, "DEF.pdf", OpenMode.Append, OpenAccess.Write)
        '  rpt.Refresh()
    End Sub

    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnExportPDF.Click
        Dim rpt As New rpt_inquiryReport
        rpt.SetDataSource(ds.Tables(1))

        rpt.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, "DEF.pdf")

        MessageBox.Show("Successfully Exported")
        'FileOpen(1, "DEF.pdf", OpenMode.Append, OpenAccess.Write)

    End Sub
End Class
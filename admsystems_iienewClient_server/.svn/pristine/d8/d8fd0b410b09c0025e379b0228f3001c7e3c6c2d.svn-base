Imports System.Data.SqlClient

Public Class OutwardRegister

    Dim linq_obj As New RoErpDataContext(System.Configuration.ConfigurationManager.AppSettings("constr").ToString())
    Dim PRID As Long
    Dim OutwardId As Long
    Dim OutwardDetailId As Long
    Dim tblItem As New DataTable
    Dim RWID As Long
    Dim ds As New DataSet
    Dim flag As Integer


    Public Sub New()
        'This call is required by the designer.
        InitializeComponent()
        bindDropDown()
        bindGrid()
        PRID = 0
        txtTotalRecords.Text = getTotalEntry().ToString()
        txtNo.Text = IIf(DGVSellItems.Rows.Count = 0, 1, DGVSellItems.Rows.Count)
        bindItemGrid()
        If (OutwardId > 0) Then
            btnSave.Enabled = False
        Else
            btnSave.Enabled = True
        End If
    End Sub

    Public Sub AutoCompated_Text()
        Dim Getadd = linq_obj.SP_Get_AddressList().ToList()
        For Each iteam As SP_Get_AddressListResult In Getadd
            txtCustomer.AutoCompleteCustomSource.Add(iteam.Name)
            txtAddress.AutoCompleteCustomSource.Add(iteam.Address)
            txtRemark.AutoCompleteCustomSource.Add(iteam.Remark)
            txtContactNo.AutoCompleteCustomSource.Add(iteam.MobileNo)

        Next
    End Sub
    Protected Sub bindDropDown()
        cmbCategory.Items.Clear()
        Dim dt As New DataTable
        dt.Columns.Add("Id")
        dt.Columns.Add("Category")
        Dim productMain = linq_obj.SP_Select_All_ProductRegisterMaster().ToList()
        For Each item As SP_Select_All_ProductRegisterMasterResult In productMain
            dt.Rows.Add(item.Pk_ProductRegisterId, item.CategoryName)
        Next
        Dim dr As DataRow = dt.NewRow()
        dr(1) = "Select"
        dt.Rows.InsertAt(dr, 0)
        cmbCategory.DataSource = dt
        cmbCategory.DisplayMember = "Category"
        cmbCategory.ValueMember = "Id"
        cmbCategory.AutoCompleteMode = AutoCompleteMode.Append
        cmbCategory.DropDownStyle = ComboBoxStyle.DropDownList
        cmbCategory.AutoCompleteSource = AutoCompleteSource.ListItems
    End Sub
    Public Sub bindGrid()
        Dim mainData = linq_obj.SP_Select_All_Tbl_OutwardMaster().ToList()
        Dim dt As New DataTable
        dt.Columns.Add("Pk_OutwardId")
        dt.Columns.Add("Outward No")
        dt.Columns.Add("Date")
        dt.Columns.Add("Name Of Customer")
        For Each item As SP_Select_All_Tbl_OutwardMasterResult In mainData
            dt.Rows.Add(item.Pk_OutwardId, item.OutWardNo, item.OutwardDate, item.Name)
        Next
        GDVOutwardDetail.DataSource = dt
        If (GDVOutwardDetail.RowCount > 0) Then
            GDVOutwardDetail.Columns(0).Visible = False
        End If
    End Sub
    Public Function getTotalEntry() As Long
        Return GDVOutwardDetail.Rows.Count - 1
    End Function
    Public Sub bindItemGrid()
        'bind a data
        tblItem.Clear()
        Dim itemData = linq_obj.SP_Select_All_Tbl_OutwardDetail().Where(Function(t) t.Fk_OutwardId = OutwardId)
        For Each item As SP_Select_All_Tbl_OutwardDetailResult In itemData
            Dim dr As DataRow
            dr = tblItem.NewRow()
            dr("SrNo") = tblItem.Rows.Count + 1
            dr("Category") = item.CategoryName
            dr("Row Material Name") = item.RowMaterialName
            dr("Quantity") = item.Quantity
            dr("Unit") = item.Unit
            dr("Fk_Category") = item.Fk_ProductRegisterId
            dr("Fk_RowMaterial") = item.Fk_RowMaterialId
            tblItem.Rows.Add(dr)
        Next
        DGVSellItems.DataSource = tblItem
        Dim rowCount As Integer
        rowCount = DGVSellItems.RowCount
        If rowCount > 0 Then
            DGVSellItems.Columns(DGVSellItems.Columns.Count - 1).Visible = False
            DGVSellItems.Columns(DGVSellItems.Columns.Count - 2).Visible = False
        End If
        txtNo.Text = IIf(DGVSellItems.Rows.Count = 0, 1, DGVSellItems.Rows.Count)
    End Sub
    Private Sub btnSearch_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSearch.Click
        Dim mainData = linq_obj.SP_Select_All_Tbl_OutwardMaster().Where(Function(t) t.OutwardDate > dtStartDate.Value And t.OutwardDate < dtEndDate.Value).ToList()
        Dim dt As New DataTable
        dt.Columns.Add("Pk_OutwardId")
        dt.Columns.Add("Outward No")
        dt.Columns.Add("Date")
        dt.Columns.Add("Name Of Customer")
        For Each item As SP_Select_All_Tbl_OutwardMasterResult In mainData
            dt.Rows.Add(item.Pk_OutwardId, item.OutWardNo, item.OutwardDate, item.Name)
        Next
        GDVOutwardDetail.DataSource = dt
    End Sub
    Private Sub cmbCategory_SelectionChangeCommitted(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbCategory.SelectionChangeCommitted
        If cmbCategory.SelectedValue > 0 Then
            PRID = cmbCategory.SelectedValue
            Dim rowMaterial = linq_obj.SP_Select_All_RowMaterialMaster(PRID).ToList()
            cmbRowMaterial.DataSource = rowMaterial
            cmbRowMaterial.DisplayMember = "RowMaterialName"
            cmbRowMaterial.ValueMember = "Pk_RowMaterialId"
            cmbRowMaterial.AutoCompleteMode = AutoCompleteMode.Append
            cmbRowMaterial.DropDownStyle = ComboBoxStyle.DropDownList
            cmbRowMaterial.AutoCompleteSource = AutoCompleteSource.ListItems
        End If
    End Sub
    Private Sub btnAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAdd.Click
        If (flag = 1) Then
            MessageBox.Show("Stock Not Available!!!")
        Else
            Dim dr As DataRow
            dr = tblItem.NewRow()
            dr("SrNo") = txtNo.Text
            dr("Category") = cmbCategory.Text
            dr("Row Material Name") = cmbRowMaterial.Text
            dr("Quantity") = txtQty.Text
            dr("Unit") = txtUnit.Text
            dr("Fk_Category") = cmbCategory.SelectedValue
            dr("Fk_RowMaterial") = cmbRowMaterial.SelectedValue
            tblItem.Rows.Add(dr)
            DGVSellItems.DataSource = tblItem
            Dim columncount As Integer
            columncount = DGVSellItems.ColumnCount
            DGVSellItems.Columns(columncount - 1).Visible = False
            DGVSellItems.Columns(columncount - 2).Visible = False
            txtNo.Text = IIf(DGVSellItems.Rows.Count = 0, 1, DGVSellItems.Rows.Count)
            subClear()
        End If

    End Sub
    Private Sub OutwardRegister_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        tblItem.Columns.Add("SrNo")
        tblItem.Columns.Add("Category")
        tblItem.Columns.Add("Row Material Name")
        tblItem.Columns.Add("Quantity")
        tblItem.Columns.Add("Unit")
        tblItem.Columns.Add("Fk_Category")
        tblItem.Columns.Add("Fk_RowMaterial")
    End Sub
    Public Sub subClear()
        ' txtNo.Text = ""
        cmbCategory.SelectedIndex = 0
        txtUnit.Text = ""
        txtQty.Text = ""
    End Sub
    Public Sub clear()
        txtAddress.Text = ""
        txtOutwardNo.Text = ""
        txtCustomer.Text = ""
        txtLastName.Text = ""
        txtNo.Text = ""
        txtPrevOutNo.Text = ""
        txtQty.Text = ""
        txtUnit.Text = ""
        txtContactNo.Text = ""
        txtRemark.Text = ""
    End Sub
    Private Sub GDVOutwardDetail_DoubleClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles GDVOutwardDetail.DoubleClick
        If (Me.GDVOutwardDetail.SelectedCells(0).Value > 0) Then
            OutwardId = Convert.ToInt64(Me.GDVOutwardDetail.SelectedCells(0).Value)
            bindItemGrid()
            Dim outwardData = linq_obj.SP_Select_Tbl_OutwardMaster_ById(OutwardId).ToList()
            If (outwardData.Count > 0) Then
                txtAddress.Text = Convert.ToString(outwardData(0).Address)
                txtCustomer.Text = Convert.ToString(outwardData(0).Name)
                txtContactNo.Text = Convert.ToString(outwardData(0).MobileNo)
                txtRemark.Text = Convert.ToString(outwardData(0).Remark)
                txtEngineer.Text = Convert.ToString(outwardData(0).EngineerName)
                txtPrevOutNo.Text = Convert.ToString(outwardData(0).PreviousOutWardNo)
                dtOutDate.Value = outwardData(0).OutwardDate
                txtOutwardNo.Text = outwardData(0).OutWardNo
            End If
            If (OutwardId > 0) Then
                btnSave.Enabled = False
            Else
                btnSave.Enabled = True
            End If
        End If

    End Sub
    Private Sub btnNew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddNew.Click
        subClear()
    End Sub
    Private Sub DGVPurchaseItems_DoubleClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DGVSellItems.DoubleClick
        Dim result As DialogResult = MessageBox.Show("Are You Sure Delete Quotation?", "Important Message", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation)
        If result = DialogResult.Yes Then
            If Me.DGVSellItems.SelectedRows.Count > 0 Then
                tblItem.Rows.RemoveAt(Convert.ToInt64(Me.DGVSellItems.CurrentCell.RowIndex))
                DGVSellItems.DataSource = tblItem
                txtNo.Text = IIf(DGVSellItems.Rows.Count = 0, 1, DGVSellItems.Rows.Count)
                'MessageBox.Show("Delete Quotation Successfully..")
            End If
        End If
    End Sub
    Private Sub btnDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDelete.Click
        If (OutwardId > 0) Then
            Dim result As DialogResult = MessageBox.Show("Are You Sure Delete Quotation?", "Important Message", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation)
            If result = DialogResult.Yes Then
                Dim res As Integer
                res = linq_obj.SP_Delete_Tbl_OutwardMaster(OutwardId)
                MessageBox.Show("Delete Quotation Successfully..")
            End If
        Else
            MessageBox.Show("No Data Selected!!!")
        End If





    End Sub
    Private Sub btnAddNewAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAddNew.Click, btnAddNewAll.Click
        clear()
        tblItem.Clear()
        DGVSellItems.DataSource = tblItem

    End Sub
    Private Sub btnChange_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnChange.Click
        If (OutwardId > 0) Then
            Dim res As Integer
            'get a address id
            Dim addressRes = linq_obj.SP_GetAddressByName(txtAddress.Text, txtCustomer.Text).ToList()
            If (addressRes.Count > 0) Then
                If txtOutwardNo.Text.Trim() <> "" Then
                    res = linq_obj.SP_Update_Tbl_OutwardMaster(addressRes(0).Pk_AddressID, txtOutwardNo.Text, dtOutDate.Value, txtEngineer.Text, txtPrevOutNo.Text, OutwardId)
                    If (res >= 0) Then
                        linq_obj.SP_Delete_Tbl_OutwardDetail(OutwardId)
                        'insert into Followup Details
                        For i As Integer = 0 To tblItem.Rows.Count - 1
                            linq_obj.SP_Insert_Tbl_OutwardDetail(Convert.ToInt64(tblItem.Rows(i)("Fk_Category")), Convert.ToInt64(tblItem.Rows(i)("Fk_RowMaterial")), OutwardId, Convert.ToInt64(tblItem.Rows(i)("Quantity")), tblItem.Rows(i)("Unit"))
                        Next
                        MessageBox.Show("Successfully Updated")
                        clear()
                        tblItem.Clear()
                        bindGrid()
                    End If
                End If
            Else
                MessageBox.Show("No Address Detail Found")
            End If
        Else
            MessageBox.Show("No Record For Updations")

        End If
    End Sub
    Private Sub btnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCancel.Click
        clear()
        tblItem.Clear()
        DGVSellItems.DataSource = tblItem

    End Sub
    Private Sub btnSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSave.Click
        Dim res As Integer
        'get a address id
        Dim addressRes = linq_obj.SP_GetAddressByName(txtAddress.Text, txtCustomer.Text).ToList()
        If (addressRes.Count > 0) Then
            If txtOutwardNo.Text.Trim() <> "" Then
                res = linq_obj.SP_Insert_Tbl_OutwardMaster(addressRes(0).Pk_AddressID, txtOutwardNo.Text, dtOutDate.Value, txtEngineer.Text, txtPrevOutNo.Text)
                If (res > 0) Then
                    linq_obj.SP_Delete_Enq_FollowDetails(res)
                    'insert into Followup Details
                    For i As Integer = 0 To tblItem.Rows.Count - 1
                        linq_obj.SP_Insert_Tbl_OutwardDetail(res, Convert.ToInt64(tblItem.Rows(i)("Fk_Category")), Convert.ToInt64(tblItem.Rows(i)("Fk_RowMaterial")), Convert.ToInt64(tblItem.Rows(i)("Quantity")), tblItem.Rows(i)("Unit"))
                    Next
                    MessageBox.Show("Successfully Saved")
                End If
            End If
        Else
            MessageBox.Show("No Address Detail Found")
        End If

        bindGrid()
        clear()
        tblItem.Clear()

    End Sub
    Private Sub btnBack_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnBack.Click
        clear()
        tblItem.Clear()
        GDVOutwardDetail.DataSource = tblItem
    End Sub
    Private Sub txtPrevOutNo_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPrevOutNo.Leave
        Dim outData = linq_obj.SP_Select_All_Tbl_OutwardMaster().Where(Function(p) p.OutWardNo = txtPrevOutNo.Text.Trim()).ToList()
        If (outData.Count > 0) Then
            OutwardId = Convert.ToInt64(outData(0).Pk_OutwardId)
            bindItemGrid()
            Dim outwardData = linq_obj.SP_Select_Tbl_OutwardMaster_ById(OutwardId).ToList()
            If (outwardData.Count > 0) Then
                txtAddress.Text = Convert.ToString(outwardData(0).Address)
                txtCustomer.Text = Convert.ToString(outwardData(0).Name)
                txtContactNo.Text = Convert.ToString(outwardData(0).MobileNo)
                txtRemark.Text = Convert.ToString(outwardData(0).Remark)
                txtEngineer.Text = Convert.ToString(outwardData(0).EngineerName)
                txtPrevOutNo.Text = Convert.ToString(outwardData(0).PreviousOutWardNo)
                dtOutDate.Value = outwardData(0).OutwardDate
                txtOutwardNo.Text = outwardData(0).OutWardNo
            End If
            If (OutwardId > 0) Then
                btnSave.Enabled = False
            Else
                btnSave.Enabled = True
            End If
        Else
            'MessageBox.Show("No Data Found");

        End If
    End Sub

    Private Sub txtQty_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtQty.TextChanged



    End Sub

    Private Sub txtQty_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtQty.Leave

        'declare a variable for identify total sell and remaining stock
        Dim itemTotalRem As Decimal
        Dim itemTotalForSell As Decimal
        Dim cmd As New SqlCommand
        cmd.CommandText = "SP_Get_Total_INOUT_Detail"
        Dim objclass As New Class1
        ds = objclass.GetStockData(cmd)
        If ds.Tables(1).Rows.Count < 1 Then
            ' MessageBox.Show("Record Not Found", "No Records", MessageBoxButtons.OK, MessageBoxIcon.Information)
            itemTotalRem = 0
        Else
            Dim count As Integer
            count = ds.Tables(1).Rows.Count
            If count > 0 Then
                For i As Integer = 0 To count - 1
                    If (Convert.ToString(ds.Tables(1).Rows(i)(5)) = cmbCategory.SelectedValue AndAlso Convert.ToString(ds.Tables(1).Rows(i)(6)) = cmbRowMaterial.SelectedValue) Then
                        itemTotalRem += Convert.ToDecimal(ds.Tables(1).Rows(i)(4))
                    End If
                Next
            End If
        End If

        If tblItem.Rows.Count < 1 Then
            itemTotalForSell = 0
            'MessageBox.Show("Record Not Found", "No Records", MessageBoxButtons.OK, MessageBoxIcon.Information)
        Else
            Dim count As Integer
            count = tblItem.Rows.Count
            If count > 0 Then
                For i As Integer = 0 To count - 1
                    If (Convert.ToString(tblItem.Rows(i)(5)) = cmbCategory.SelectedValue AndAlso Convert.ToString(tblItem.Rows(i)(6)) = cmbRowMaterial.SelectedValue) Then
                        itemTotalForSell += Convert.ToDecimal(tblItem.Rows(i)(3))
                    End If
                Next
            End If
        End If


        Dim enterQty As Integer

        If (txtQty.Text <> "") Then
            enterQty = Convert.ToDecimal(txtQty.Text)
        Else
            enterQty = 0
        End If
        itemTotalForSell += enterQty

        If (itemTotalRem >= itemTotalForSell) Then
            flag = 0
        Else
            flag = 1

        End If


        If (flag = 1) Then
            MessageBox.Show("Please Enter Proper Qty")

        End If
    End Sub
End Class